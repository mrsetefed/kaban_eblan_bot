import json
import logging
from telegram import Update
from telegram.ext import ContextTypes

ROLES_FILE = "roles.json"
SECRET_PASSWORD = "–∫–µ–±–∞–±"  # –ó–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π

async def verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üëâ –ö–æ–º–∞–Ω–¥–∞ /verify –≤—ã–∑–≤–∞–Ω–∞")

    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `/verify –≤–∞—à_–ø–∞—Ä–æ–ª—å`", parse_mode="Markdown")
        logging.warning("‚õîÔ∏è –ü–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω")
        return

    user_id = str(update.effective_user.id)
    password = context.args[0]
    logging.info(f"üîë –ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å: {password} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        with open(ROLES_FILE, "r", encoding="utf-8") as f:
            roles = json.load(f)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {ROLES_FILE}: {e}")
        roles = {}

    if password == SECRET_PASSWORD:
        roles[user_id] = "admin"

        try:
            with open(ROLES_FILE, "w", encoding="utf-8") as f:
                json.dump(roles, f, indent=2)
            await update.message.reply_text("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–ª—å admin.")
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å admin")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª–∏: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
    else:
        logging.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")