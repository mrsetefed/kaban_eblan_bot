import os
import sys
import csv
import logging
from datetime import datetime, timedelta
from aiohttp import web
import requests
import asyncio

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
try:
    TOKEN = os.environ["BOT_TOKEN"]
except KeyError:
    print("‚ùå BOT_TOKEN not found in environment variables", file=sys.stderr)
    sys.exit(1)

WEBHOOK_PATH = "/"
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}" if RENDER_EXTERNAL_URL else None

SCHEDULE_URL = "https://raw.githubusercontent.com/mrsetefed/kaban_eblan_bot/refs/heads/main/schedule.csv"

# --- –ß—Ç–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
async def fetch_schedule():
    try:
        response = requests.get(SCHEDULE_URL)
        response.raise_for_status()
        lines = response.text.strip().split("\n")
        schedule = {}
        for line in lines:
            parts = line.strip().split(",", maxsplit=1)
            if len(parts) == 2:
                date_str, text = parts
                schedule[date_str.strip()] = text.strip()
        return schedule
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {e}")
        return {}

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç—ä–µ–±–∏—Å—å.")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = await fetch_schedule()
    today_str = datetime.now().strftime("%Y-%m-%d")
    message = schedule.get(today_str, "–°–µ–≥–æ–¥–Ω—è –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω")
    await update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {message}")

async def tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = await fetch_schedule()
    tomorrow_str = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    message = schedule.get(tomorrow_str, "–ù–∞ –∑–∞–≤—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω")
    await update.message.reply_text(f"üìÖ –ó–∞–≤—Ç—Ä–∞: {message}")

async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = await fetch_schedule()
    today = datetime.now()
    lines = []
    for i in range(7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        pretty = date.strftime("%d.%m (%a)")
        text = schedule.get(date_str, "‚Äî")
        lines.append(f"{pretty}: {text}")
    await update.message.reply_text("\n".join(lines))

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä ---
async def handle(request):
    try:
        data = await request.json()
        update = Update.de_json(data, app.bot)
        await app.initialize()
        await app.process_update(update)
        return web.Response(text="ok")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return web.Response(status=500, text="error")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    global app
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫...")

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("tomorrow", tomorrow))
    app.add_handler(CommandHandler("week", week))

    if WEBHOOK_URL:
        try:
            await app.bot.set_webhook(url=WEBHOOK_URL)
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

    aio_app = web.Application()
    aio_app.router.add_post(WEBHOOK_PATH, handle)

    # –í–º–µ—Å—Ç–æ web.run_app
    runner = web.AppRunner(aio_app)
    await runner.setup()
    site = web.TCPSite(runner, port=10000)
    await site.start()

    logging.info("üåê –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 10000")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())