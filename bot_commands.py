from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from schedule_utils import fetch_schedule, get_today_str, get_tomorrow_str, get_next_7_days

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç—ä–µ–±–∏—Å—å.")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = await fetch_schedule()
    today_str = get_today_str()
    message = schedule.get(today_str, "–°–µ–≥–æ–¥–Ω—è –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω")
    await update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {message}")

async def tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = await fetch_schedule()
    tomorrow_str = get_tomorrow_str()
    message = schedule.get(tomorrow_str, "–ù–∞ –∑–∞–≤—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω")
    await update.message.reply_text(f"üìÖ –ó–∞–≤—Ç—Ä–∞: {message}")

async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = await fetch_schedule()
    dates = get_next_7_days()
    lines = []
    for date_obj, date_str, pretty in dates:
        text = schedule.get(date_str, "‚Äî")
        lines.append(f"{pretty}: {text}")
    await update.message.reply_text("\n".join(lines))

def get_handlers():
    return [
        CommandHandler("start", start),
        CommandHandler("ping", ping),
        CommandHandler("today", today),
        CommandHandler("tomorrow", tomorrow),
        CommandHandler("week", week),
    ]
